@startuml
class Color
{
color_ : std::vector<double>
Color(color:std::vector<double>)
Color(hue:double, saturation:double, value:double)
operator[](int index) : double&
}

enum TypesOfRequest
{
System, 
None, 
Deliver
}

enum States
{
Running,
DoDeliver,
Move,
Rotate,
Waiting,
Disabling
}

class Detector
{
findAngle(massCenter1:const cv::Point2i&, massCenter2 : const cv::Point2i&,
massCenter3 : const cv::Point2i&) : float
findDistanceToDestination(averageCenter : const cv::Point2i&, 
destination : const cv::Point2i&) : int
TakeThresholdOfBlob(frameHSV : const cv::Mat&, color : Color) : cv::Mat 
detectBlob(frame : cv::Mat&, threshold : const cv::Mat&) : cv::Rect
SteppedDetection(frame : cv::Mat&, colorHSV : Color) : cv::Point2i
GetMassCenter(rectangle : const cv::Rect&) : cv::Point2i
GetMassCenter(center1 : const cv::Point2i&, center2 : const cv::Point2i &) : cv::Point2i
}

struct AlphaBot
{
head : cv::Point2i
tail : cv::Point2i
}

class Request 
{
destination_ : cv::Point2i
type_ : TypesOfRequest 
colorPuf_ : Color
Request()
Request(colorPuf : Color, type : TypesOfRequest)
operator=(req : Request&) : Request&
SetColor(hue : double, saturation :  double, value : double) 
SetDestination(point : cv::Point2i )
SetColor(color : Color)
SetType(type : TypesOfRequest)
GetColor() : Color 
GetDestination() : cv::Point2i&
GetType() : TypesOfRequest 
}

class Controller
{
tailColorHsv_ : Color
headColorHsv_ : Color
state_ : States
mosq_ : shared_ptr<myMosq>
bot_ : AlphaBot
MakeRequest(req : Request&, colorPuf : Color, type : TypesOfRequest)
FinishRequest(req : Request&)
Move(distance : int)
Rotate(angle : float)
GoHome()
FiniteAutomate(cap : cv::VideoCapture&)
}

struct MqttMessage
{
command : const char*
seconds : double
}

class mosquittopp
class myMosq
{
MQTT_SERVER : const char*
MQTT_SUB_TOPIC : const char*
MQTT_PUB_TOPIC : const char*
KEEP_ALIVE : int
MQTT_PORT : int
colorRequest_ : std::vector<double>
isConnected_ : bool
isSubscribed_ : bool
isRunning_ : bool
inProcess_ : bool
on_connect(int rc)
on_subscribe(mid : int, qos_count : int, granted_qos : const int*)
on_message(msg : const struct mosquitto_message*)
myMosq(mqttServer : const char*, mqttSubTopic : const char*,
mqttPubTopic : const char*, id : const char*, clean_session : bool)
\~myMosq()
Subscribe()
SendToServer(data : const char*)
Publish(message : const MqttMessage*) : void*
GetMessage() : std::vector<double>
}

MqttMessage o-- myMosq
mosquittopp <|- myMosq
Detector --> Color
Request -* TypesOfRequest
AlphaBot o-- Controller
Controller --> Request
Controller --> Detector
Controller -> myMosq
Controller --> Color
Controller --> MqttMessage
Controller -* States
@enduml