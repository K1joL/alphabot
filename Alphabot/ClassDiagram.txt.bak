@startuml
class Color
{
color_ : std::vector<double>
Color(std::vector<double> color)
Color(double hue, double saturation, double value)
operator[](int index) : double&
}

class Detector
{
findAngle(const cv::Point2i &massCenter1, const cv::Point2i &massCenter2,
const cv::Point2i &massCenter3) : float
findDistanceToDestination(const cv::Point2i &averageCenter, 
const cv::Point2i &destination) : int
TakeThresholdOfBlob(const cv::Mat &frameHSV, Color Color) : cv::Mat 
detectBlob(cv::Mat &frame, const cv::Mat &threshold) : cv::Rect
SteppedDetection(cv::Mat &frame, Color colorHSV) : cv::Point2i
GetMassCenter(const cv::Rect &rectangle) : cv::Point2i
GetMassCenter(const cv::Point2i &center1, const cv::Point2i &center2) : cv::Point2i
}

struct AlphaBot
{
head : cv::Point2i
tail : cv::Point2i
}

class Request 
{
destination_ : cv::Point2i
type_ : TypesOfRequest 
colorPuf_ : Color
Request()
Request(Color colorPuf, TypesOfRequest type)
operator=(Request &req) : Request&
SetColor(double hue, double saturation, double value)
SetDestination(cv::Point2i point)
SetColor(Color color)
SetType(TypesOfRequest type)
GetColor() : Color 
GetDestination() : cv::Point2i&
GetType() : TypesOfRequest 
}

class Controller
{
tailColorHsv_ : Color
headColorHsv_ : Color
state_ : States
mosq_ : shared_ptr<myMosq>
bot_ : AlphaBot
MakeRequest(Request &req, Color colorPuf, TypesOfRequest type)
FinishRequest(Request &req)
Move(int distance)
Rotate(float angle)
GoHome()
FiniteAutomate(cv::VideoCapture &cap)
}

struct MqttMessage
{
command : const char*
seconds : double
}

class mosquittopp
class myMosq
{
MQTT_SERVER : const char*
MQTT_SUB_TOPIC : const char*
MQTT_PUB_TOPIC : const char*
KEEP_ALIVE : int
MQTT_PORT : int
colorRequest_ : std::vector<double>
isConnected_ : bool
isSubscribed_ : bool
isRunning_ : bool
inProcess_ : bool
on_connect(int rc)
on_subscribe(int mid, int qos_count, const int *granted_qos)
on_message(const struct mosquitto_message *msg)
myMosq(const char* mqttServer, const char* mqttSubTopic,
const char* mqttPubTopic, const char *id = NULL, bool clean_session = true)
\~myMosq()
Subscribe()
SendToServer(const char *data)
Publish(const MqttMessage* message) : void*
GetMessage() : std::vector<double>
}

MqttMessage o-- myMosq
mosquittopp <|- myMosq
Detector --> Color
AlphaBot o-- Controller
Controller --> Request
Controller --> Detector
Controller -> myMosq
Controller --> Color
Controller --> MqttMessage
@enduml